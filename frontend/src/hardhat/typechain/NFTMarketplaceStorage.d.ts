/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NFTMarketplaceStorageInterface extends ethers.utils.Interface {
  functions: {
    "ERC721Composable_ValidateFingerprint()": FunctionFragment;
    "ERC721_Interface()": FunctionFragment;
    "ERC721_Received()": FunctionFragment;
    "MAX_BID_DURATION()": FunctionFragment;
    "MIN_BID_DURATION()": FunctionFragment;
    "ONE_MILLION()": FunctionFragment;
    "bidCounterByToken(address,uint256)": FunctionFragment;
    "bidIdByTokenAndBidder(address,uint256,address)": FunctionFragment;
    "bidIndexByBidId(bytes32)": FunctionFragment;
    "paymentToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC721Composable_ValidateFingerprint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_Interface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_Received",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BID_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BID_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_MILLION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bidCounterByToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidIdByTokenAndBidder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bidIndexByBidId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC721Composable_ValidateFingerprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BID_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BID_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_MILLION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidCounterByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidIdByTokenAndBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidIndexByBidId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;

  events: {
    "BidAccepted(bytes32,address,uint256,address,address,uint256)": EventFragment;
    "BidCancelled(bytes32,address,uint256,address)": EventFragment;
    "BidCreated(bytes32,address,uint256,address,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCreated"): EventFragment;
}

export class NFTMarketplaceStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NFTMarketplaceStorageInterface;

  functions: {
    ERC721Composable_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ERC721Composable_ValidateFingerprint()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ERC721_Interface(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ERC721_Interface()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ERC721_Received(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ERC721_Received()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MAX_BID_DURATION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MAX_BID_DURATION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_BID_DURATION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MIN_BID_DURATION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ONE_MILLION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ONE_MILLION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bidCounterByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "bidCounterByToken(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bidIdByTokenAndBidder(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "bidIdByTokenAndBidder(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    bidIndexByBidId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "bidIndexByBidId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paymentToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "paymentToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  ERC721Composable_ValidateFingerprint(
    overrides?: CallOverrides
  ): Promise<string>;

  "ERC721Composable_ValidateFingerprint()"(
    overrides?: CallOverrides
  ): Promise<string>;

  ERC721_Interface(overrides?: CallOverrides): Promise<string>;

  "ERC721_Interface()"(overrides?: CallOverrides): Promise<string>;

  ERC721_Received(overrides?: CallOverrides): Promise<string>;

  "ERC721_Received()"(overrides?: CallOverrides): Promise<string>;

  MAX_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_BID_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_BID_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_MILLION(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE_MILLION()"(overrides?: CallOverrides): Promise<BigNumber>;

  bidCounterByToken(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "bidCounterByToken(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bidIdByTokenAndBidder(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "bidIdByTokenAndBidder(address,uint256,address)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<string>;

  bidIndexByBidId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "bidIndexByBidId(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  "paymentToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ERC721Composable_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<string>;

    "ERC721Composable_ValidateFingerprint()"(
      overrides?: CallOverrides
    ): Promise<string>;

    ERC721_Interface(overrides?: CallOverrides): Promise<string>;

    "ERC721_Interface()"(overrides?: CallOverrides): Promise<string>;

    ERC721_Received(overrides?: CallOverrides): Promise<string>;

    "ERC721_Received()"(overrides?: CallOverrides): Promise<string>;

    MAX_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BID_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_BID_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_MILLION(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE_MILLION()"(overrides?: CallOverrides): Promise<BigNumber>;

    bidCounterByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidCounterByToken(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidIdByTokenAndBidder(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "bidIdByTokenAndBidder(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<string>;

    bidIndexByBidId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidIndexByBidId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    "paymentToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    BidAccepted(
      _id: null,
      _tokenAddress: string | null,
      _tokenId: BigNumberish | null,
      _bidder: null,
      _seller: string | null,
      _price: null
    ): EventFilter;

    BidCancelled(
      _id: null,
      _tokenAddress: string | null,
      _tokenId: BigNumberish | null,
      _bidder: string | null
    ): EventFilter;

    BidCreated(
      _id: null,
      _tokenAddress: string | null,
      _tokenId: BigNumberish | null,
      _bidder: string | null,
      _price: null,
      _expiresAt: null,
      _fingerprint: null
    ): EventFilter;
  };

  estimateGas: {
    ERC721Composable_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ERC721Composable_ValidateFingerprint()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ERC721_Interface(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC721_Interface()"(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_Received(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC721_Received()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BID_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BID_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_BID_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_MILLION(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE_MILLION()"(overrides?: CallOverrides): Promise<BigNumber>;

    bidCounterByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidCounterByToken(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidIdByTokenAndBidder(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidIdByTokenAndBidder(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidIndexByBidId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidIndexByBidId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC721Composable_ValidateFingerprint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ERC721Composable_ValidateFingerprint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC721_Interface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ERC721_Interface()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC721_Received(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ERC721_Received()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_BID_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_BID_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_BID_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MIN_BID_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_MILLION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONE_MILLION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bidCounterByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bidCounterByToken(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidIdByTokenAndBidder(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bidIdByTokenAndBidder(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidIndexByBidId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bidIndexByBidId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paymentToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
