{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "BidAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "BidCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_expiresAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_fingerprint",
          "type": "bytes"
        }
      ],
      "name": "BidCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC721Composable_ValidateFingerprint",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC721_Interface",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC721_Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BID_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BID_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_MILLION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidCounterByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bidIdByTokenAndBidder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bidIndexByBidId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "getBidByBidder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBidByToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract ERC20Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_fingerprint",
          "type": "bytes"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_bidders",
          "type": "address[]"
        }
      ],
      "name": "removeExpiredBids",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ef86bf2dbadcdcd4f09a9bcdb1d7ed5a4faf971579929d42ef3dafb94a04a32",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "1941988",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000040000000000000000000000000000000008000000000000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x03b74141a1e9c26987f9a2aff41cb8ae1287abfb0b343d3a280c9ced4632e01d",
    "transactionHash": "0x5ef86bf2dbadcdcd4f09a9bcdb1d7ed5a4faf971579929d42ef3dafb94a04a32",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x5ef86bf2dbadcdcd4f09a9bcdb1d7ed5a4faf971579929d42ef3dafb94a04a32",
        "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x03b74141a1e9c26987f9a2aff41cb8ae1287abfb0b343d3a280c9ced4632e01d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x5ef86bf2dbadcdcd4f09a9bcdb1d7ed5a4faf971579929d42ef3dafb94a04a32",
        "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x03b74141a1e9c26987f9a2aff41cb8ae1287abfb0b343d3a280c9ced4632e01d"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "1941988",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "solcInputHash": "d5b47b3381206ba56c368a0485ad8961",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"BidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC721Composable_ValidateFingerprint\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BID_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BID_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MILLION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidCounterByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidIdByTokenAndBidder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bidIndexByBidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getBidByBidder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBidByToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_bidders\",\"type\":\"address[]\"}],\"name\":\"removeExpiredBids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelBid(address,uint256)\":{\"details\":\"Cancel a bid for an ERC721 token\",\"params\":{\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"constructor\":{\"details\":\"Constructor of the contract.\",\"params\":{\"_owner\":\"- address of the owner for the contract\",\"_paymentToken\":\"- address of the payment token\"}},\"getBidByBidder(address,uint256,address)\":{\"details\":\"Get the active bid id and index by a bidder and an specific token.\",\"params\":{\"_bidder\":\"- address of the bidder\",\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"},\"returns\":{\"bidId\":\"- bytes32 of the bid id\",\"bidIndex\":\"- uint256 of the bid index to be used within bidsByToken mapping\",\"bidder\":\"- address of the bidder address\",\"expiresAt\":\"- uint256 of the expiration time\",\"price\":\"- uint256 of the bid price\"}},\"getBidByToken(address,uint256,uint256)\":{\"details\":\"Get an NFT token bid by index\",\"params\":{\"_index\":\"- uint256 of the index\",\"_tokenAddress\":\"- address of the NFT token\",\"_tokenId\":\"- uint256 of the token id\"},\"returns\":{\"_0\":\"bytes32 of the bid id\",\"_1\":\"address of the bidder address\",\"_2\":\"uint256 of the bid price\",\"_3\":\"uint256 of the expiration time\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Used as the only way to accept a bid. The token owner should send the token to this contract using safeTransferFrom. The last parameter (bytes) should be the bid id.\",\"params\":{\"_data\":\"Additional data with no specified format\",\"_from\":\"The address which previously owned the token\",\"_tokenId\":\"The NFT identifier which is being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"placeBid(address,uint256,uint256,uint256)\":{\"details\":\"Place a bid for an ERC721 token.\",\"params\":{\"_duration\":\"- uint256 of the duration in seconds for the bid\",\"_price\":\"- uint256 of the price for the bid\",\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"placeBid(address,uint256,uint256,uint256,bytes)\":{\"details\":\"Place a bid for an ERC721 token with fingerprint.\",\"params\":{\"_duration\":\"- uint256 of the duration in seconds for the bid\",\"_fingerprint\":\"- bytes of ERC721 token fingerprint\",\"_price\":\"- uint256 of the price for the bid\",\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"removeExpiredBids(address[],uint256[],address[])\":{\"details\":\"Remove expired bids\",\"params\":{\"_bidders\":\"- address[] of the bidders\",\"_tokenAddresses\":\"- address[] of the ERC721 tokens\",\"_tokenIds\":\"- uint256[] of the token ids\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBidByBidder(address,uint256,address)\":{\"notice\":\"If the bidder has not a valid bid, the transaction will be reverted.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"The ERC721 smart contract calls this function on the recipient after a `safetransfer`. This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted. Note: Contract address is always the message sender. This method should be seen as 'acceptBid'. It validates that the bid id matches an active bid for the bid token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketplace.sol\":\"NFTMarketplace\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xc1202fa69783cb3ea0d87f178cab5e1f3a77de7fc0dff3c47f668f3cd65d9273\",\"license\":\"MIT\"},\"contracts/NFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./NFTMarketplaceStorage.sol\\\";\\n\\n\\ncontract NFTMarketplace is Ownable, NFTMarketplaceStorage {\\n    using Address for address;\\n\\n    /**\\n    * @dev Constructor of the contract.\\n    * @param _paymentToken - address of the payment token\\n    * @param _owner - address of the owner for the contract\\n    */\\n    constructor(address _paymentToken, address _owner) Ownable() {\\n\\n        paymentToken = ERC20Interface(_paymentToken);\\n        // Set owner\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n    * @dev Place a bid for an ERC721 token.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _price - uint256 of the price for the bid\\n    * @param _duration - uint256 of the duration in seconds for the bid\\n    */\\n    function placeBid(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _price,\\n        uint256 _duration\\n    )\\n        public\\n    {\\n        _placeBid(\\n            _tokenAddress,\\n            _tokenId,\\n            _price,\\n            _duration,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n    * @dev Place a bid for an ERC721 token with fingerprint.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _price - uint256 of the price for the bid\\n    * @param _duration - uint256 of the duration in seconds for the bid\\n    * @param _fingerprint - bytes of ERC721 token fingerprint\\n    */\\n    function placeBid(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _price,\\n        uint256 _duration,\\n        bytes memory _fingerprint\\n    )\\n        public\\n    {\\n        _placeBid(\\n            _tokenAddress,\\n            _tokenId,\\n            _price,\\n            _duration,\\n            _fingerprint\\n        );\\n    }\\n\\n    /**\\n    * @dev Place a bid for an ERC721 token with fingerprint.\\n    * @notice Tokens can have multiple bids by different users.\\n    * Users can have only one bid per token.\\n    * If the user places a bid and has an active bid for that token,\\n    * the older one will be replaced with the new one.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _price - uint256 of the price for the bid\\n    * @param _duration - uint256 of the duration in seconds for the bid\\n    * @param _fingerprint - bytes of ERC721 token fingerprint\\n    */\\n    function _placeBid(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _price,\\n        uint256 _duration,\\n        bytes memory _fingerprint\\n    )\\n        private\\n    {\\n        _requireERC721(_tokenAddress);\\n        _requireComposableERC721(_tokenAddress, _tokenId, _fingerprint);\\n\\n        require(_price > 0, \\\"Price should be bigger than 0\\\");\\n\\n        _requireBidderBalance(msg.sender, _price);\\n\\n        require(\\n            _duration >= MIN_BID_DURATION,\\n            \\\"The bid should last longer than 5 minutes\\\"\\n        );\\n\\n        require(\\n            _duration <= MAX_BID_DURATION,\\n            \\\"The bid can not last longer than 6 months\\\"\\n        );\\n\\n        ERC721Interface token = ERC721Interface(_tokenAddress);\\n        address tokenOwner = token.ownerOf(_tokenId);\\n        require(\\n            tokenOwner != address(0) && tokenOwner != msg.sender,\\n            \\\"The token should have an owner different from the sender\\\"\\n        );\\n\\n        uint256 expiresAt = block.timestamp + _duration;\\n\\n        bytes32 bidId = keccak256(\\n            abi.encodePacked(\\n                block.timestamp,\\n                msg.sender,\\n                _tokenAddress,\\n                _tokenId,\\n                _price,\\n                _duration,\\n                _fingerprint\\n            )\\n        );\\n\\n        uint256 bidIndex;\\n\\n        if (_bidderHasABid(_tokenAddress, _tokenId, msg.sender)) {\\n            bytes32 oldBidId;\\n            (bidIndex, oldBidId,,,) = getBidByBidder(_tokenAddress, _tokenId, msg.sender);\\n\\n            // Delete old bid reference\\n            delete bidIndexByBidId[oldBidId];\\n        } else {\\n            // Use the bid counter to assign the index if there is not an active bid.\\n            bidIndex = bidCounterByToken[_tokenAddress][_tokenId];\\n            // Increase bid counter\\n            bidCounterByToken[_tokenAddress][_tokenId]++;\\n        }\\n\\n        // Set bid references\\n        bidIdByTokenAndBidder[_tokenAddress][_tokenId][msg.sender] = bidId;\\n        bidIndexByBidId[bidId] = bidIndex;\\n\\n        // Save Bid\\n        bidsByToken[_tokenAddress][_tokenId][bidIndex] = Bid({\\n            id: bidId,\\n            bidder: msg.sender,\\n            tokenAddress: _tokenAddress,\\n            tokenId: _tokenId,\\n            price: _price,\\n            expiresAt: expiresAt,\\n            fingerprint: _fingerprint\\n        });\\n\\n        emit BidCreated(\\n            bidId,\\n            _tokenAddress,\\n            _tokenId,\\n            msg.sender,\\n            _price,\\n            expiresAt,\\n            _fingerprint\\n        );\\n    }\\n\\n    /**\\n    * @dev Used as the only way to accept a bid.\\n    * The token owner should send the token to this contract using safeTransferFrom.\\n    * The last parameter (bytes) should be the bid id.\\n    * @notice  The ERC721 smart contract calls this function on the recipient\\n    * after a `safetransfer`. This function MAY throw to revert and reject the\\n    * transfer. Return of other than the magic value MUST result in the\\n    * transaction being reverted.\\n    * Note:\\n    * Contract address is always the message sender.\\n    * This method should be seen as 'acceptBid'.\\n    * It validates that the bid id matches an active bid for the bid token.\\n    * @param _from The address which previously owned the token\\n    * @param _tokenId The NFT identifier which is being transferred\\n    * @param _data Additional data with no specified format\\n    * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    */\\n    function onERC721Received(\\n        address _from,\\n        address /*_to*/,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    )\\n        public\\n        returns (bytes4)\\n    {\\n        bytes32 bidId = _bytesToBytes32(_data);\\n        uint256 bidIndex = bidIndexByBidId[bidId];\\n\\n        Bid memory bid = _getBid(msg.sender, _tokenId, bidIndex);\\n\\n        // Check if the bid is valid.\\n        require(\\n            // solium-disable-next-line operator-whitespace\\n            bid.id == bidId &&\\n            bid.expiresAt >= block.timestamp,\\n            \\\"Invalid bid\\\"\\n        );\\n\\n        address bidder = bid.bidder;\\n        uint256 price = bid.price;\\n\\n        // Check fingerprint if necessary\\n        _requireComposableERC721(msg.sender, _tokenId, bid.fingerprint);\\n\\n        // Check if bidder has funds\\n        _requireBidderBalance(bidder, price);\\n\\n        // Delete bid references from contract storage\\n        delete bidsByToken[msg.sender][_tokenId][bidIndex];\\n        delete bidIndexByBidId[bidId];\\n        delete bidIdByTokenAndBidder[msg.sender][_tokenId][bidder];\\n\\n        // Reset bid counter to invalidate other bids placed for the token\\n        delete bidCounterByToken[msg.sender][_tokenId];\\n\\n        // Transfer token to bidder\\n        ERC721Interface(msg.sender).transferFrom(address(this), bidder, _tokenId);\\n\\n        emit BidAccepted(\\n            bidId,\\n            msg.sender,\\n            _tokenId,\\n            bidder,\\n            _from,\\n            price\\n        );\\n\\n        return ERC721_Received;\\n    }\\n\\n    /**\\n    * @dev Remove expired bids\\n    * @param _tokenAddresses - address[] of the ERC721 tokens\\n    * @param _tokenIds - uint256[] of the token ids\\n    * @param _bidders - address[] of the bidders\\n    */\\n    function removeExpiredBids(address[] memory _tokenAddresses, uint256[] memory _tokenIds, address[] memory _bidders)\\n    public\\n    {\\n        uint256 loopLength = _tokenAddresses.length;\\n\\n        require(loopLength == _tokenIds.length, \\\"Parameter arrays should have the same length\\\");\\n        require(loopLength == _bidders.length, \\\"Parameter arrays should have the same length\\\");\\n\\n        for (uint256 i = 0; i < loopLength; i++) {\\n            _removeExpiredBid(_tokenAddresses[i], _tokenIds[i], _bidders[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev Remove expired bid\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _bidder - address of the bidder\\n    */\\n    function _removeExpiredBid(address _tokenAddress, uint256 _tokenId, address _bidder)\\n    internal\\n    {\\n        (uint256 bidIndex, bytes32 bidId,,,uint256 expiresAt) = getBidByBidder(\\n            _tokenAddress,\\n            _tokenId,\\n            _bidder\\n        );\\n\\n        require(expiresAt < block.timestamp, \\\"The bid to remove should be expired\\\");\\n\\n        _cancelBid(\\n            bidIndex,\\n            bidId,\\n            _tokenAddress,\\n            _tokenId,\\n            _bidder\\n        );\\n    }\\n\\n    /**\\n    * @dev Cancel a bid for an ERC721 token\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    */\\n    function cancelBid(address _tokenAddress, uint256 _tokenId) public {\\n        // Get active bid\\n        (uint256 bidIndex, bytes32 bidId,,,) = getBidByBidder(\\n            _tokenAddress,\\n            _tokenId,\\n            msg.sender\\n        );\\n\\n        _cancelBid(\\n            bidIndex,\\n            bidId,\\n            _tokenAddress,\\n            _tokenId,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n    * @dev Cancel a bid for an ERC721 token\\n    * @param _bidIndex - uint256 of the index of the bid\\n    * @param _bidId - bytes32 of the bid id\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _bidder - address of the bidder\\n    */\\n    function _cancelBid(\\n        uint256 _bidIndex,\\n        bytes32 _bidId,\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _bidder\\n    )\\n        internal\\n    {\\n        // Delete bid references\\n        delete bidIndexByBidId[_bidId];\\n        delete bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\\n\\n        // Check if the bid is at the end of the mapping\\n        uint256 lastBidIndex = bidCounterByToken[_tokenAddress][_tokenId] - 1;\\n        if (lastBidIndex != _bidIndex) {\\n            // Move last bid to the removed place\\n            Bid storage lastBid = bidsByToken[_tokenAddress][_tokenId][lastBidIndex];\\n            bidsByToken[_tokenAddress][_tokenId][_bidIndex] = lastBid;\\n            bidIndexByBidId[lastBid.id] = _bidIndex;\\n        }\\n\\n        // Delete empty index\\n        delete bidsByToken[_tokenAddress][_tokenId][lastBidIndex];\\n\\n        // Decrease bids counter\\n        bidCounterByToken[_tokenAddress][_tokenId]--;\\n\\n        // emit BidCancelled event\\n        emit BidCancelled(\\n            _bidId,\\n            _tokenAddress,\\n            _tokenId,\\n            _bidder\\n        );\\n    }\\n\\n     /**\\n    * @dev Check if the bidder has a bid for an specific token.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _bidder - address of the bidder\\n    * @return bool whether the bidder has an active bid\\n    */\\n    function _bidderHasABid(address _tokenAddress, uint256 _tokenId, address _bidder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 bidId = bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\\n        uint256 bidIndex = bidIndexByBidId[bidId];\\n        // Bid index should be inside bounds\\n        if (bidIndex < bidCounterByToken[_tokenAddress][_tokenId]) {\\n            Bid memory bid = bidsByToken[_tokenAddress][_tokenId][bidIndex];\\n            return bid.bidder == _bidder;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    * @dev Get the active bid id and index by a bidder and an specific token.\\n    * @notice If the bidder has not a valid bid, the transaction will be reverted.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _bidder - address of the bidder\\n    * @return bidIndex - uint256 of the bid index to be used within bidsByToken mapping\\n    * @return bidId - bytes32 of the bid id\\n    * @return bidder - address of the bidder address\\n    * @return price - uint256 of the bid price\\n    * @return expiresAt - uint256 of the expiration time\\n    */\\n    function getBidByBidder(address _tokenAddress, uint256 _tokenId, address _bidder)\\n        public\\n        view\\n        returns (\\n            uint256 bidIndex,\\n            bytes32 bidId,\\n            address bidder,\\n            uint256 price,\\n            uint256 expiresAt\\n        )\\n    {\\n        bidId = bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\\n        bidIndex = bidIndexByBidId[bidId];\\n        (bidId, bidder, price, expiresAt) = getBidByToken(_tokenAddress, _tokenId, bidIndex);\\n        if (_bidder != bidder) {\\n            revert(\\\"Bidder has not an active bid for this token\\\");\\n        }\\n    }\\n\\n    /**\\n    * @dev Get an NFT token bid by index\\n    * @param _tokenAddress - address of the NFT token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _index - uint256 of the index\\n    * @return bytes32 of the bid id\\n    * @return address of the bidder address\\n    * @return uint256 of the bid price\\n    * @return uint256 of the expiration time\\n    */\\n    function getBidByToken(address _tokenAddress, uint256 _tokenId, uint256 _index)\\n        public\\n        view\\n        returns (bytes32, address, uint256, uint256)\\n    {\\n\\n        Bid memory bid = _getBid(_tokenAddress, _tokenId, _index);\\n        return (\\n            bid.id,\\n            bid.bidder,\\n            bid.price,\\n            bid.expiresAt\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the active bid id and index by a bidder and an specific token.\\n    * @notice If the index is not valid, it will revert.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _index - uint256 of the index\\n    * @return Bid\\n    */\\n    function _getBid(address _tokenAddress, uint256 _tokenId, uint256 _index)\\n        internal\\n        view\\n        returns (Bid memory)\\n    {\\n        require(_index < bidCounterByToken[_tokenAddress][_tokenId], \\\"Invalid index\\\");\\n        return bidsByToken[_tokenAddress][_tokenId][_index];\\n    }\\n\\n    /**\\n    * @dev Convert bytes to bytes32\\n    * @param _data - bytes\\n    * @return bytes32\\n    */\\n    function _bytesToBytes32(bytes memory _data) internal pure returns (bytes32) {\\n        require(_data.length == 32, \\\"The data should be 32 bytes length\\\");\\n\\n        bytes32 bidId;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            bidId := mload(add(_data, 0x20))\\n        }\\n        return bidId;\\n    }\\n\\n    /**\\n    * @dev Check if the token has a valid ERC721 implementation\\n    * @param _tokenAddress - address of the token\\n    */\\n    function _requireERC721(address _tokenAddress) internal view {\\n        require(_tokenAddress.isContract(), \\\"Token should be a contract\\\");\\n\\n        ERC721Interface token = ERC721Interface(_tokenAddress);\\n        require(\\n            token.supportsInterface(ERC721_Interface),\\n            \\\"Token has an invalid ERC721 implementation\\\"\\n        );\\n    }\\n\\n    /**\\n    * @dev Check if the token has a valid Composable ERC721 implementation\\n    * And its fingerprint is valid\\n    * @param _tokenAddress - address of the token\\n    * @param _tokenId - uint256 of the index\\n    * @param _fingerprint - bytes of the fingerprint\\n    */\\n    function _requireComposableERC721(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        bytes memory _fingerprint\\n    )\\n        internal\\n        view\\n    {\\n        ERC721Verifiable composableToken = ERC721Verifiable(_tokenAddress);\\n        if (composableToken.supportsInterface(ERC721Composable_ValidateFingerprint)) {\\n            require(\\n                composableToken.verifyFingerprint(_tokenId, _fingerprint),\\n                \\\"Token fingerprint is not valid\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n    * @dev Check if the bidder has balance and the contract has enough allowance\\n    * to use bidder payment token on his behalf\\n    * @param _bidder - address of bidder\\n    * @param _amount - uint256 of amount\\n    */\\n    function _requireBidderBalance(address _bidder, uint256 _amount) internal view {\\n        require(\\n            paymentToken.balanceOf(_bidder) >= _amount,\\n            \\\"Insufficient funds\\\"\\n        );\\n        require(\\n            paymentToken.allowance(_bidder, address(this)) >= _amount,\\n            \\\"The contract is not authorized to use payment token on bidder behalf\\\"\\n        );\\n    }\\n}\",\"keccak256\":\"0xfd2e1f24dd1356a6e176f72ca389d47deeaca30bc1da875df763724402719c5c\",\"license\":\"MIT\"},\"contracts/NFTMarketplaceStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title Interface for contracts conforming to ERC-20\\n */\\ninterface ERC20Interface {\\n    function balanceOf(address from) external view returns (uint256);\\n    function transferFrom(address from, address to, uint tokens) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\\n\\n/**\\n * @title Interface for contracts conforming to ERC-721\\n */\\ninterface ERC721Interface {\\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function supportsInterface(bytes4) external view returns (bool);\\n}\\n\\n\\ninterface ERC721Verifiable is ERC721Interface {\\n    function verifyFingerprint(uint256, bytes memory) external view returns (bool);\\n}\\n\\n\\ncontract NFTMarketplaceStorage {\\n    // 182 days - 26 weeks - 6 months\\n    uint256 public constant MAX_BID_DURATION = 182 days;\\n    uint256 public constant MIN_BID_DURATION = 5 minutes;\\n    uint256 public constant ONE_MILLION = 1000000;\\n    bytes4 public constant ERC721_Interface = 0x80ac58cd;\\n    bytes4 public constant ERC721_Received = 0x150b7a02;\\n    bytes4 public constant ERC721Composable_ValidateFingerprint = 0x8f9f4b63;\\n\\n    struct Bid {\\n        // Bid Id\\n        bytes32 id;\\n        // Bidder address\\n        address bidder;\\n        // ERC721 address\\n        address tokenAddress;\\n        // ERC721 token id\\n        uint256 tokenId;\\n        // Price for the bid in wei\\n        uint256 price;\\n        // Time when this bid ends\\n        uint256 expiresAt;\\n        // Fingerprint for composable\\n        bytes fingerprint;\\n    }\\n\\n    // payment token\\n    ERC20Interface public paymentToken;\\n\\n    // Bid by token address => token id => bid index => bid\\n    mapping(address => mapping(uint256 => mapping(uint256 => Bid))) internal bidsByToken;\\n    // Bid count by token address => token id => bid counts\\n    mapping(address => mapping(uint256 => uint256)) public bidCounterByToken;\\n    // Index of the bid at bidsByToken mapping by bid id => bid index\\n    mapping(bytes32 => uint256) public bidIndexByBidId;\\n    // Bid id by token address => token id => bidder address => bidId\\n    mapping(address => mapping(uint256 => mapping(address => bytes32)))\\n    public\\n    bidIdByTokenAndBidder;\\n\\n    // EVENTS\\n    event BidCreated(\\n      bytes32 _id,\\n      address indexed _tokenAddress,\\n      uint256 indexed _tokenId,\\n      address indexed _bidder,\\n      uint256 _price,\\n      uint256 _expiresAt,\\n      bytes _fingerprint\\n    );\\n\\n    event BidAccepted(\\n      bytes32 _id,\\n      address indexed _tokenAddress,\\n      uint256 indexed _tokenId,\\n      address _bidder,\\n      address indexed _seller,\\n      uint256 _price\\n    );\\n\\n    event BidCancelled(\\n      bytes32 _id,\\n      address indexed _tokenAddress,\\n      uint256 indexed _tokenId,\\n      address indexed _bidder\\n    );\\n\\n}\",\"keccak256\":\"0x08415351129cf75665ec16ea99538aeff79ba7f337fd62a154d0751de308fd21\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x531e0b85f8483b2cf3007901d885cf071e0ca14d5c05b08f0cde7891625cf7e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelBid(address,uint256)": {
        "details": "Cancel a bid for an ERC721 token",
        "params": {
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "constructor": {
        "details": "Constructor of the contract.",
        "params": {
          "_owner": "- address of the owner for the contract",
          "_paymentToken": "- address of the payment token"
        }
      },
      "getBidByBidder(address,uint256,address)": {
        "details": "Get the active bid id and index by a bidder and an specific token.",
        "params": {
          "_bidder": "- address of the bidder",
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        },
        "returns": {
          "bidId": "- bytes32 of the bid id",
          "bidIndex": "- uint256 of the bid index to be used within bidsByToken mapping",
          "bidder": "- address of the bidder address",
          "expiresAt": "- uint256 of the expiration time",
          "price": "- uint256 of the bid price"
        }
      },
      "getBidByToken(address,uint256,uint256)": {
        "details": "Get an NFT token bid by index",
        "params": {
          "_index": "- uint256 of the index",
          "_tokenAddress": "- address of the NFT token",
          "_tokenId": "- uint256 of the token id"
        },
        "returns": {
          "_0": "bytes32 of the bid id",
          "_1": "address of the bidder address",
          "_2": "uint256 of the bid price",
          "_3": "uint256 of the expiration time"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Used as the only way to accept a bid. The token owner should send the token to this contract using safeTransferFrom. The last parameter (bytes) should be the bid id.",
        "params": {
          "_data": "Additional data with no specified format",
          "_from": "The address which previously owned the token",
          "_tokenId": "The NFT identifier which is being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "placeBid(address,uint256,uint256,uint256)": {
        "details": "Place a bid for an ERC721 token.",
        "params": {
          "_duration": "- uint256 of the duration in seconds for the bid",
          "_price": "- uint256 of the price for the bid",
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "placeBid(address,uint256,uint256,uint256,bytes)": {
        "details": "Place a bid for an ERC721 token with fingerprint.",
        "params": {
          "_duration": "- uint256 of the duration in seconds for the bid",
          "_fingerprint": "- bytes of ERC721 token fingerprint",
          "_price": "- uint256 of the price for the bid",
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "removeExpiredBids(address[],uint256[],address[])": {
        "details": "Remove expired bids",
        "params": {
          "_bidders": "- address[] of the bidders",
          "_tokenAddresses": "- address[] of the ERC721 tokens",
          "_tokenIds": "- uint256[] of the token ids"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBidByBidder(address,uint256,address)": {
        "notice": "If the bidder has not a valid bid, the transaction will be reverted."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "The ERC721 smart contract calls this function on the recipient after a `safetransfer`. This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted. Note: Contract address is always the message sender. This method should be seen as 'acceptBid'. It validates that the bid id matches an active bid for the bid token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2321,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1333,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "paymentToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC20Interface)1260"
      },
      {
        "astId": 1342,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "bidsByToken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Bid)1330_storage)))"
      },
      {
        "astId": 1348,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "bidCounterByToken",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1352,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "bidIndexByBidId",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1360,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "bidIdByTokenAndBidder",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_bytes32)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Interface)1260": {
        "encoding": "inplace",
        "label": "contract ERC20Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_bytes32))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Bid)1330_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct NFTMarketplaceStorage.Bid)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Bid)1330_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes32)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Bid)1330_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct NFTMarketplaceStorage.Bid))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bid)1330_storage)"
      },
      "t_mapping(t_uint256,t_struct(Bid)1330_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketplaceStorage.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)1330_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bid)1330_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplaceStorage.Bid",
        "members": [
          {
            "astId": 1317,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1319,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "bidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1321,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1323,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1325,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1327,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "expiresAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1329,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "fingerprint",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}